import React, { ForwardRefExoticComponent, FunctionComponent, ReactNode, RefAttributes } from "react";
import { ComponentProps } from "react";
import { DeepPartial, UseFormReturn } from "react-hook-form";
import { AnyZodObject, z, ZodEffects } from "zod";
import { IndexOf, IndexOfUnwrapZodType, RequireKeysWithRequiredChildren, UnwrapMapping } from "./typeUtilities";
import { RTFBaseZodType, RTFSupportedZodTypes } from "./supportedZodTypes";
export type ReactProps = Record<string, any>;
export type ReactComponentWithRequiredProps<Props extends ReactProps> = ((props: Props) => JSX.Element) | (ForwardRefExoticComponent<Props> & RefAttributes<unknown>);
export type MappingItem<PropType extends ReactProps> = readonly [
    RTFBaseZodType,
    ReactComponentWithRequiredProps<PropType>
];
export type FormComponentMapping = readonly MappingItem<any>[];
export type MappableProp = "control" | "name" | "enumValues" | "descriptionLabel" | "descriptionPlaceholder";
export type PropsMapping = readonly (readonly [MappableProp, string])[];
export declare function noMatchingSchemaErrorMessage(propertyName: string, propertyType: string): string;
export declare function useFormResultValueChangedErrorMesssage(): string;
type FormComponent = "form" | ((props: any) => JSX.Element);
export type ExtraProps = {
    beforeElement?: ReactNode;
    afterElement?: ReactNode;
};
type UnwrapEffects<T extends RTFSupportedZodTypes | ZodEffects<any, any>> = T extends AnyZodObject ? T : T extends ZodEffects<infer EffectsSchema, any> ? EffectsSchema extends ZodEffects<infer EffectsSchemaInner, any> ? EffectsSchemaInner : EffectsSchema : never;
declare const defaultPropsMap: readonly [readonly ["name", "name"], readonly ["control", "control"], readonly ["enumValues", "enumValues"]];
type RTFFormSchemaType = z.AnyZodObject | ZodEffects<any, any>;
type RTFFormSubmitFn<SchemaType extends RTFFormSchemaType> = (values: z.infer<SchemaType>) => void | Promise<void>;
export declare function createTsForm<Mapping extends FormComponentMapping, PropsMapType extends PropsMapping = typeof defaultPropsMap, FormType extends FormComponent = "form">(componentMap: Mapping, options?: {
    FormComponent?: FormType;
    propsMap?: PropsMapType;
}): JSX.Element | (<SchemaType extends RTFFormSchemaType>({ schema, onSubmit, props, formProps, defaultValues, renderAfter, renderBefore, form, children: CustomChildrenComponent, }: {
    schema: SchemaType;
    onSubmit: RTFFormSubmitFn<RTFFormSchemaType>;
    defaultValues?: DeepPartial<z.TypeOf<UnwrapEffects<SchemaType>>> | undefined;
    renderAfter?: ((vars: {
        submit: () => void;
    }) => ReactNode) | undefined;
    renderBefore?: ((vars: {
        submit: () => void;
    }) => ReactNode) | undefined;
    form?: UseFormReturn<z.TypeOf<SchemaType>, any> | undefined;
    children?: React.FunctionComponent<z.TypeOf<UnwrapEffects<SchemaType>> extends infer T ? { [key in keyof T]: React.ReactNode; } : never> | undefined;
} & {
    props?: RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<SchemaType>> extends infer T_1 ? { [key_1 in keyof T_1]: Mapping[IndexOf<UnwrapMapping<Mapping>, readonly [IndexOfUnwrapZodType<ReturnType<UnwrapEffects<SchemaType>["_def"]["shape"]>[key_1]>, any]>] extends readonly [any, any] ? Omit<React.ComponentProps<Mapping[IndexOf<UnwrapMapping<Mapping>, readonly [IndexOfUnwrapZodType<ReturnType<UnwrapEffects<SchemaType>["_def"]["shape"]>[key_1]>, any]>][1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined;
} & { [P in ((import("./typeUtilities").RequiredKeys<RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<SchemaType>> extends infer T_2 ? { [key_1 in keyof T_2]: Mapping[IndexOf<UnwrapMapping<Mapping>, readonly [IndexOfUnwrapZodType<ReturnType<UnwrapEffects<SchemaType>["_def"]["shape"]>[key_1]>, any]>] extends readonly [any, any] ? Omit<React.ComponentProps<Mapping[IndexOf<UnwrapMapping<Mapping>, readonly [IndexOfUnwrapZodType<ReturnType<UnwrapEffects<SchemaType>["_def"]["shape"]>[key_1]>, any]>][1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined>[keyof import("./typeUtilities").RequiredKeys<RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<SchemaType>> extends infer T_2 ? { [key_1 in keyof T_2]: Mapping[IndexOf<UnwrapMapping<Mapping>, readonly [IndexOfUnwrapZodType<ReturnType<UnwrapEffects<SchemaType>["_def"]["shape"]>[key_1]>, any]>] extends readonly [any, any] ? Omit<React.ComponentProps<Mapping[IndexOf<UnwrapMapping<Mapping>, readonly [IndexOfUnwrapZodType<ReturnType<UnwrapEffects<SchemaType>["_def"]["shape"]>[key_1]>, any]>][1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined>] extends never ? true : false) extends false ? true : false) extends true ? "props" : never]-?: {
    props?: RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<SchemaType>> extends infer T_1 ? { [key_1 in keyof T_1]: Mapping[IndexOf<UnwrapMapping<Mapping>, readonly [IndexOfUnwrapZodType<ReturnType<UnwrapEffects<SchemaType>["_def"]["shape"]>[key_1]>, any]>] extends readonly [any, any] ? Omit<React.ComponentProps<Mapping[IndexOf<UnwrapMapping<Mapping>, readonly [IndexOfUnwrapZodType<ReturnType<UnwrapEffects<SchemaType>["_def"]["shape"]>[key_1]>, any]>][1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined;
}[P]; } & {
    formProps?: Omit<React.ComponentProps<FormType>, "children" | "onSubmit"> | undefined;
} & { [P_1 in ((import("./typeUtilities").RequiredKeys<Omit<React.ComponentProps<FormType>, "children" | "onSubmit"> | undefined>[keyof import("./typeUtilities").RequiredKeys<Omit<React.ComponentProps<FormType>, "children" | "onSubmit"> | undefined>] extends never ? true : false) extends false ? true : false) extends true ? "formProps" : never]-?: {
    formProps?: Omit<React.ComponentProps<FormType>, "children" | "onSubmit"> | undefined;
}[P_1]; }) => JSX.Element);
export {};
