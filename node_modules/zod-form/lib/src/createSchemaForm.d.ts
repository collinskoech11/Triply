import React, { ForwardRefExoticComponent, ReactElement, ReactNode, RefAttributes } from "react";
import { ComponentProps } from "react";
import { DeepPartial, useForm, UseFormReturn } from "react-hook-form";
import { AnyZodObject, z, ZodEffects } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";
import { DistributiveOmit, IndexOf, IndexOfUnwrapZodType, RequireKeysWithRequiredChildren, UnwrapMapping } from "./typeUtilities";
import { RTFBaseZodType, RTFSupportedZodTypes } from "./supportedZodTypes";
export type ReactProps = Record<string, any>;
export type ReactComponentWithRequiredProps<Props extends ReactProps> = ((props: Props) => JSX.Element) | (ForwardRefExoticComponent<Props> & RefAttributes<unknown>);
export type MappingItem<PropType extends ReactProps> = readonly [
    RTFBaseZodType,
    ReactComponentWithRequiredProps<PropType>
];
export type FormComponentMapping = readonly MappingItem<any>[];
export type MappableProp = "control" | "name" | "enumValues" | "descriptionLabel" | "descriptionPlaceholder";
export type PropsMapping = readonly (readonly [MappableProp, string])[];
export declare function noMatchingSchemaErrorMessage(propertyName: string, propertyType: string): string;
export declare function useFormResultValueChangedErrorMesssage(): string;
export type FormComponent = "form" | ((props: any) => JSX.Element);
export type ExtraProps = {
    beforeElement?: ReactNode;
    afterElement?: ReactNode;
};
export type UnwrapEffects<T extends RTFSupportedZodTypes | ZodEffects<any, any>> = T extends AnyZodObject ? T : T extends ZodEffects<infer EffectsSchema, any> ? EffectsSchema extends ZodEffects<infer EffectsSchemaInner, any> ? EffectsSchemaInner : EffectsSchema : never;
declare const defaultPropsMap: readonly [readonly ["name", "name"], readonly ["control", "control"], readonly ["enumValues", "enumValues"]];
export type RTFFormSchemaType = z.AnyZodObject | ZodEffects<any, any>;
export type RTFFormSubmitFn<SchemaType extends RTFFormSchemaType> = (values: z.infer<SchemaType>) => void | Promise<void>;
export type SchemaShape<SchemaType extends RTFSupportedZodTypes | ZodEffects<any, any>> = ReturnType<UnwrapEffects<SchemaType>["_def"]["shape"]>;
export type IndexOfSchemaInMapping<Mapping extends FormComponentMapping, SchemaType extends RTFSupportedZodTypes | ZodEffects<any, any>, key extends keyof z.infer<UnwrapEffects<SchemaType>>> = IndexOf<UnwrapMapping<Mapping>, readonly [IndexOfUnwrapZodType<SchemaShape<SchemaType>[key]>, any]>;
export type GetTupleFromMapping<Mapping extends FormComponentMapping, SchemaType extends RTFSupportedZodTypes | ZodEffects<any, any>, key extends keyof z.infer<UnwrapEffects<SchemaType>>> = IndexOfSchemaInMapping<Mapping, SchemaType, key> extends never ? never : Mapping[IndexOfSchemaInMapping<Mapping, SchemaType, key>];
export type Prev = [never, 0, 1, 2, 3];
export type MaxDefaultRecursionDepth = 1;
export type PropType<Mapping extends FormComponentMapping, SchemaType extends RTFSupportedZodTypes | ZodEffects<any, any>, PropsMapType extends PropsMapping = typeof defaultPropsMap, Level extends Prev[number] = MaxDefaultRecursionDepth> = [Level] extends [never] ? never : RequireKeysWithRequiredChildren<Partial<{
    [key in keyof z.infer<UnwrapEffects<SchemaType>>]: GetTupleFromMapping<Mapping, SchemaType, key> extends never ? UnwrapEffects<SchemaType>["shape"][key] extends z.AnyZodObject ? PropType<Mapping, UnwrapEffects<SchemaType>["shape"][key], PropsMapType, Prev[Level]> : UnwrapEffects<SchemaType>["shape"][key] extends z.ZodArray<any> ? PropType<Mapping, UnwrapEffects<SchemaType>["shape"][key]["element"], PropsMapType, Prev[Level]> : never : GetTupleFromMapping<Mapping, SchemaType, key> extends readonly [
        any,
        any
    ] ? DistributiveOmit<ComponentProps<GetTupleFromMapping<Mapping, SchemaType, key>[1]>, PropsMapType[number][1]> & ExtraProps : never;
}>>;
export type RenderedFieldMap<SchemaType extends AnyZodObject | ZodEffects<any, any>, Level extends Prev[number] = MaxDefaultRecursionDepth> = [Level] extends [never] ? never : {
    [key in keyof z.infer<UnwrapEffects<SchemaType>>]: UnwrapEffects<SchemaType>["shape"][key] extends z.AnyZodObject ? RenderedFieldMap<UnwrapEffects<SchemaType>["shape"][key], Prev[Level]> : UnwrapEffects<SchemaType>["shape"][key] extends z.ZodArray<any> ? UnwrapEffects<SchemaType>["shape"][key]["element"] extends z.AnyZodObject ? RenderedFieldMap<UnwrapEffects<SchemaType>["shape"][key]["element"], Prev[Level]>[] : JSX.Element[] : JSX.Element;
};
export type CustomChildRenderProp<SchemaType extends RTFFormSchemaType> = (fieldMap: RenderedFieldMap<SchemaType>) => ReactElement<any, any> | null;
export type RTFFormSpecificProps<SchemaType extends z.AnyZodObject | ZodEffects<any, any>, FormType extends FormComponent = "form"> = {
    defaultValues?: DeepPartial<z.infer<UnwrapEffects<SchemaType>>>;
    onSubmit: RTFFormSubmitFn<SchemaType>;
    renderAfter?: (vars: {
        submit: () => void;
    }) => ReactNode;
    renderBefore?: (vars: {
        submit: () => void;
    }) => ReactNode;
    form?: UseFormReturn<z.infer<SchemaType>>;
} & RequireKeysWithRequiredChildren<{
    formProps?: DistributiveOmit<ComponentProps<FormType>, "children" | "onSubmit">;
}>;
export type RTFSharedFormProps<Mapping extends FormComponentMapping, SchemaType extends z.AnyZodObject | ZodEffects<any, any>, PropsMapType extends PropsMapping = typeof defaultPropsMap> = {
    schema: SchemaType;
    children?: CustomChildRenderProp<SchemaType>;
} & RequireKeysWithRequiredChildren<{
    props?: PropType<Mapping, SchemaType, PropsMapType>;
}>;
export type RTFFormProps<Mapping extends FormComponentMapping, SchemaType extends z.AnyZodObject | ZodEffects<any, any>, PropsMapType extends PropsMapping = typeof defaultPropsMap, FormType extends FormComponent = "form"> = RTFSharedFormProps<Mapping, SchemaType, PropsMapType> & RTFFormSpecificProps<SchemaType, FormType>;
export type TsForm<Mapping extends FormComponentMapping, PropsMapType extends PropsMapping, FormType extends FormComponent> = <SchemaType extends RTFFormSchemaType>(props: RTFFormProps<Mapping, SchemaType, PropsMapType, FormType>) => React.ReactElement<any, any>;
export type TsFormCreateOptions<FormType extends FormComponent, PropsMapType extends PropsMapping> = {
    FormComponent?: FormType;
    propsMap?: PropsMapType;
};
export declare function createTsForm<Mapping extends FormComponentMapping, PropsMapType extends PropsMapping = typeof defaultPropsMap, FormType extends FormComponent = "form">(componentMap: Mapping, options?: TsFormCreateOptions<FormType, PropsMapType>): TsForm<Mapping, PropsMapType, FormType>;
export declare function createTsFormAndFragment<Mapping extends FormComponentMapping, PropsMapType extends PropsMapping = typeof defaultPropsMap, FormType extends FormComponent = "form">(componentMap: Mapping, options?: TsFormCreateOptions<FormType, PropsMapType>): readonly [<SchemaType extends RTFFormSchemaType>({ schema, onSubmit, props, formProps, defaultValues, renderAfter, renderBefore, form, children, }: RTFFormProps<Mapping, SchemaType, PropsMapType, FormType>) => JSX.Element, <SchemaType_1 extends RTFFormSchemaType>({ schema, props, children, schemaKey, }: {
    schema: SchemaType_1;
    children?: CustomChildRenderProp<SchemaType_1> | undefined;
} & {
    props?: RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<SchemaType_1>> extends infer T ? { [key in keyof T]: GetTupleFromMapping<Mapping, SchemaType_1, key> extends never ? UnwrapEffects<SchemaType_1>["shape"][key] extends AnyZodObject ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>> extends infer T_1 ? { [key_1 in keyof T_1]: GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1> extends never ? UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>["shape"][key_1] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>["shape"][key_1] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : UnwrapEffects<SchemaType_1>["shape"][key] extends z.ZodArray<any, "many"> ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>> extends infer T_2 ? { [key_2 in keyof T_2]: GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2> extends never ? UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>["shape"][key_2] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>["shape"][key_2] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : never : GetTupleFromMapping<Mapping, SchemaType_1, key> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, SchemaType_1, key>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined;
} & { [P in ((import("./typeUtilities").RequiredKeys<RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<SchemaType_1>> extends infer T_3 ? { [key in keyof T_3]: GetTupleFromMapping<Mapping, SchemaType_1, key> extends never ? UnwrapEffects<SchemaType_1>["shape"][key] extends AnyZodObject ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>> extends infer T_4 ? { [key_1 in keyof T_4]: GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1> extends never ? UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>["shape"][key_1] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>["shape"][key_1] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : UnwrapEffects<SchemaType_1>["shape"][key] extends z.ZodArray<any, "many"> ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>> extends infer T_5 ? { [key_2 in keyof T_5]: GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2> extends never ? UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>["shape"][key_2] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>["shape"][key_2] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : never : GetTupleFromMapping<Mapping, SchemaType_1, key> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, SchemaType_1, key>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined>[keyof import("./typeUtilities").RequiredKeys<RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<SchemaType_1>> extends infer T_3 ? { [key in keyof T_3]: GetTupleFromMapping<Mapping, SchemaType_1, key> extends never ? UnwrapEffects<SchemaType_1>["shape"][key] extends AnyZodObject ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>> extends infer T_4 ? { [key_1 in keyof T_4]: GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1> extends never ? UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>["shape"][key_1] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>["shape"][key_1] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : UnwrapEffects<SchemaType_1>["shape"][key] extends z.ZodArray<any, "many"> ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>> extends infer T_5 ? { [key_2 in keyof T_5]: GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2> extends never ? UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>["shape"][key_2] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>["shape"][key_2] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : never : GetTupleFromMapping<Mapping, SchemaType_1, key> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, SchemaType_1, key>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined>] extends never ? true : false) extends false ? true : false) extends true ? "props" : never]-?: {
    props?: RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<SchemaType_1>> extends infer T ? { [key in keyof T]: GetTupleFromMapping<Mapping, SchemaType_1, key> extends never ? UnwrapEffects<SchemaType_1>["shape"][key] extends AnyZodObject ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>> extends infer T_1 ? { [key_1 in keyof T_1]: GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1> extends never ? UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>["shape"][key_1] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]>["shape"][key_1] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key], key_1>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : UnwrapEffects<SchemaType_1>["shape"][key] extends z.ZodArray<any, "many"> ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>> extends infer T_2 ? { [key_2 in keyof T_2]: GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2> extends never ? UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>["shape"][key_2] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<SchemaType_1>["shape"][key]["element"]>["shape"][key_2] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<SchemaType_1>["shape"][key]["element"], key_2>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : never : GetTupleFromMapping<Mapping, SchemaType_1, key> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, SchemaType_1, key>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined;
}[P]; } & {
    schemaKey?: string | number | undefined;
}) => JSX.Element, <Type extends RTFSupportedZodTypes | z.ZodEffects<any, any, any>>(props: Pick<{
    schema: Type;
    props: RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<Type>> extends infer T_6 ? { [key_3 in keyof T_6]: GetTupleFromMapping<Mapping, Type, key_3> extends never ? UnwrapEffects<Type>["shape"][key_3] extends AnyZodObject ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>> extends infer T_7 ? { [key_4 in keyof T_7]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : UnwrapEffects<Type>["shape"][key_3] extends z.ZodArray<any, "many"> ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>> extends infer T_8 ? { [key_5 in keyof T_8]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : never : GetTupleFromMapping<Mapping, Type, key_3> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, Type, key_3>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>>;
    schemaKey: string | number;
    form: UseFormReturn<Record<string, any>, any>;
    namePrefix: string | undefined;
    submitter: Submitter;
}, "schema" | "schemaKey"> & {
    props?: RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<Type>> extends infer T_6 ? { [key_3 in keyof T_6]: GetTupleFromMapping<Mapping, Type, key_3> extends never ? UnwrapEffects<Type>["shape"][key_3] extends AnyZodObject ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>> extends infer T_7 ? { [key_4 in keyof T_7]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : UnwrapEffects<Type>["shape"][key_3] extends z.ZodArray<any, "many"> ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>> extends infer T_8 ? { [key_5 in keyof T_8]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : never : GetTupleFromMapping<Mapping, Type, key_3> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, Type, key_3>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined;
} & { [P_1 in ((import("./typeUtilities").RequiredKeys<RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<Type>> extends infer T_9 ? { [key_3 in keyof T_9]: GetTupleFromMapping<Mapping, Type, key_3> extends never ? UnwrapEffects<Type>["shape"][key_3] extends AnyZodObject ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>> extends infer T_10 ? { [key_4 in keyof T_10]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : UnwrapEffects<Type>["shape"][key_3] extends z.ZodArray<any, "many"> ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>> extends infer T_11 ? { [key_5 in keyof T_11]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : never : GetTupleFromMapping<Mapping, Type, key_3> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, Type, key_3>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined>[keyof import("./typeUtilities").RequiredKeys<RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<Type>> extends infer T_9 ? { [key_3 in keyof T_9]: GetTupleFromMapping<Mapping, Type, key_3> extends never ? UnwrapEffects<Type>["shape"][key_3] extends AnyZodObject ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>> extends infer T_10 ? { [key_4 in keyof T_10]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : UnwrapEffects<Type>["shape"][key_3] extends z.ZodArray<any, "many"> ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>> extends infer T_11 ? { [key_5 in keyof T_11]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : never : GetTupleFromMapping<Mapping, Type, key_3> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, Type, key_3>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined>] extends never ? true : false) extends false ? true : false) extends true ? "props" : never]-?: {
    props?: RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<Type>> extends infer T_6 ? { [key_3 in keyof T_6]: GetTupleFromMapping<Mapping, Type, key_3> extends never ? UnwrapEffects<Type>["shape"][key_3] extends AnyZodObject ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>> extends infer T_7 ? { [key_4 in keyof T_7]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]>["shape"][key_4] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3], key_4>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : UnwrapEffects<Type>["shape"][key_3] extends z.ZodArray<any, "many"> ? RequireKeysWithRequiredChildren<Partial<z.TypeOf<UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>> extends infer T_8 ? { [key_5 in keyof T_8]: GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends never ? UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends AnyZodObject ? never : UnwrapEffects<UnwrapEffects<Type>["shape"][key_3]["element"]>["shape"][key_5] extends z.ZodArray<any, "many"> ? never : never : GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, UnwrapEffects<Type>["shape"][key_3]["element"], key_5>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> : never : GetTupleFromMapping<Mapping, Type, key_3> extends readonly [any, any] ? DistributiveOmit<React.ComponentProps<(readonly [any, any] & GetTupleFromMapping<Mapping, Type, key_3>)[1]>, PropsMapType[number][1]> & ExtraProps : never; } : never>> | undefined;
}[P_1]; }) => JSX.Element];
declare function useSubmitter<SchemaType extends RTFFormSchemaType>({ resolver, onSubmit, setError, }: {
    resolver: ReturnType<typeof zodResolver>;
    onSubmit: RTFFormSubmitFn<SchemaType>;
    setError: ReturnType<typeof useForm>["setError"];
}): {
    submit: (data: z.infer<SchemaType>) => Promise<void>;
    removeUndefined: (data: any) => any;
    removeFromCoerceUndefined: (fieldName: string) => void;
    addToCoerceUndefined: (fieldName: string) => void;
};
type Submitter = ReturnType<typeof useSubmitter>;
export declare function useSubmitterContext(): {
    submit: (data: any) => Promise<void>;
    removeUndefined: (data: any) => any;
    removeFromCoerceUndefined: (fieldName: string) => void;
    addToCoerceUndefined: (fieldName: string) => void;
};
export declare function SubmitterContextProvider({ children, ...submitter }: ReturnType<typeof useSubmitter> & {
    children: ReactNode;
}): JSX.Element;
export type RenderedElement = JSX.Element | JSX.Element[] | RenderedObjectElements | RenderedElement[];
export type RenderedObjectElements = {
    [key: string]: RenderedElement;
};
export declare function flattenRenderedElements(val: RenderedElement): JSX.Element[];
export {};
